#POWERED BY TELUGU CODERS

from modules.cache.admins import admins
from modules.clientbot import call_py, bot
from pyrogram import Client, filters
from modules.codersdesign.thumbnail import thumb
from modules.clientbot.queues import QUEUE, clear_queue
from modules.helpers.filters import other_filters
from modules.helpers.command import commandpro as command
from modules.helpers.decorators import authorized_users_only
from modules.clientbot.utils import skip_current_song, skip_item
from modules.config import BOT_USERNAME, GROUP, IMG_5, NETWORK
from pyrogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)


@Client.on_message(command(["/reload", f"/reload@{BOT_USERNAME}"]) & other_filters)
@authorized_users_only
async def update_admin(client, message):
    global admins
    new_admins = []
    new_ads = await client.get_chat_members(message.chat.id, filter="administrators")
    for u in new_ads:
        new_admins.append(u.user.id)
    admins[message.chat.id] = new_admins
    await message.reply_text(
        f"**üíñ s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è  Ä·¥á ü·¥è·¥Ä·¥Ö·¥á·¥Ö ·¥ç·¥ús…™·¥Ñ  ô·¥è·¥õ.\nüíû s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è  Ä·¥á ü·¥è·¥Ä·¥Ö·¥á·¥Ö ·¥Ä·¥Ö·¥ç…™…¥  ü…™s·¥õ.\n‚ï∞ ·¥ç·¥ús…™·¥Ñ  ô·¥è·¥õ  Ä·¥á ü·¥è·¥Ä·¥Ö·¥á·¥Ö ·¥Ä·¥Ö·¥ç…™…¥  ô è: {message.from_user.mention()}**"
    )


@Client.on_message(command(["/skip", f"/skip@{BOT_USERNAME}", "/vskip"]) & other_filters)
@authorized_users_only
async def skip(c: Client, m: Message):
    await m.delete()
    user_id = m.from_user.id
    chat_id = m.chat.id
    if len(m.command) < 2:
        op = await skip_current_song(chat_id)
        if op == 0:
            await c.send_message(chat_id, "**…¥·¥è·¥õ ú…™…¥…¢ ·¥õ·¥è ·¥ò ü·¥Ä è  ô·¥Ä ô è üë∂..**")
        elif op == 1:
            await c.send_message(chat_id, " è·¥è·¥ú Ä «´·¥ú·¥á·¥ú·¥á …™s ·¥á·¥ç·¥ò·¥õ è  ô è·¥á …™·¥Ä·¥ç  ü·¥á·¥Ä·¥†…™…¥…¢ ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õ (·¥†·¥Ñ)üòå..")
        elif op == 2:
            await c.send_message(chat_id, "**…™·¥Ä·¥ç ·¥Ñ ü·¥á·¥Ä Ä…™…¥…¢  è·¥è·¥ú Ä «´·¥ú·¥á·¥ú·¥ás  ô è·¥á …™·¥Ä·¥ç  ü·¥á·¥Ä·¥†…™…¥…¢ ·¥†·¥Ñ  ô·¥Ä ô è....**")
        else:
            buttons = InlineKeyboardMarkup(
            [
                [
                        InlineKeyboardButton(
                            text="üóë  ô…™…¥",
                            callback_data="set_close")

                ]
            ]
        )
 
            thumbnail = f"{IMG_5}"
            title = f"{op[0]}"
            userid = m.from_user.id
            image = await thumb(thumbnail, title, userid)
            await c.send_photo(
                chat_id,
                photo=image,
                reply_markup=buttons,
                caption=f"ü•≥ **s·¥ã…™·¥ò·¥ò·¥á·¥Ö ·¥õ·¥è ·¥õ ú·¥á …¥·¥áx·¥õ s·¥è…¥…¢.\n‚ï∞ ·¥ç·¥ús…™·¥Ñ s·¥ã…™·¥ò·¥ò·¥á·¥Ö  ô è: {m.from_user.mention()}**",
            )
    else:
        skip = m.text.split(None, 1)[1]
        OP = "üóë **…™·¥Ä·¥ç  Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö s·¥è…¥…¢ “ì Ä·¥è·¥ç «´·¥ú·¥á·¥ú·¥á\n ·¥õ ú·¥Ä…¥·¥ã  è·¥è·¥ú ‚ù§üåπ:**"
        if chat_id in QUEUE:
            items = [int(x) for x in skip.split(" ") if x.isdigit()]
            items.sort(reverse=True)
            for x in items:
                if x == 0:
                    pass
                else:
                    hm = await skip_item(chat_id, x)
                    if hm == 0:
                        pass
                    else:
                        OP = OP + "\n" + f"**#{x}** - {hm}"
            await m.reply(OP)


@Client.on_message(
    command(["/stop", f"/stop@{BOT_USERNAME}", "/end", f"/end@{BOT_USERNAME}", "/vstop"])
    & other_filters
)
@authorized_users_only
async def stop(client, m: Message):
    chat_id = m.chat.id
    if chat_id in QUEUE:
        try:
            await call_py.leave_group_call(chat_id)
            clear_queue(chat_id)
            await m.reply("**…™·¥Ä·¥ç ·¥Ö…™s·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö “ì Ä·¥è·¥ç ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õ**")
        except Exception as e:
            await m.reply(f"üö´ **·¥á Ä Ä·¥è Ä:**\n\n`{e}`")
    else:
        await m.reply("üî• **…¥·¥è·¥õ ú…™…¥…¢ …™s s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢  ú·¥á Ä·¥á üòí...**")


@Client.on_message(
    command(["/pause", f"/pause@{BOT_USERNAME}", "/vpause"]) & other_filters
)
@authorized_users_only
async def pause(client, m: Message):
    chat_id = m.chat.id
    if chat_id in QUEUE:
        try:
            await call_py.pause_stream(chat_id)
            await m.reply(
                f"**üåπ s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥ò·¥Ä·¥ús·¥á·¥Ö ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è ·¥ò ü·¥Ä è…™…¥…¢ s·¥è…¥…¢.\n‚ï∞ ·¥ç·¥ús…™·¥Ñ ·¥ò·¥Ä·¥ús·¥á·¥Ö  ô è: {m.from_user.mention()}**"
            )
        except Exception as e:
            await m.reply(f"üö´ **·¥á Ä Ä·¥è Ä:**\n\n`{e}`")
    else:
        await m.reply("üî• **…¥·¥è·¥õ ú…™…¥…¢ …™s s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢  ú·¥á Ä·¥á üòí ...**")


@Client.on_message(
    command(["/resume", f"/resume@{BOT_USERNAME}", "/vresume"]) & other_filters
)
@authorized_users_only
async def resume(client, m: Message):
    chat_id = m.chat.id
    if chat_id in QUEUE:
        try:
            await call_py.resume_stream(chat_id)
            await m.reply(
                f"**üëª s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è  Ä·¥ás·¥ú·¥ç·¥á·¥Ö ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è ·¥ò ü·¥Ä è…™…¥…¢ s·¥è…¥…¢.\n‚ï∞ ·¥ç·¥ús…™·¥Ñ  Ä·¥ás·¥ú·¥ç·¥á·¥Ö  ô è: {m.from_user.mention()}**"
            )
        except Exception as e:
            await m.reply(f"üö´ **·¥á Ä Ä·¥è Ä:**\n\n`{e}`")
    else:
        await m.reply("üî• **…¥·¥è·¥õ ú…™…¥…¢ …™s s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢  ú·¥á Ä·¥á üòí**")
